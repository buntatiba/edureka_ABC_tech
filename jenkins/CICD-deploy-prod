pipeline {
    agent any
     environment {
            TOMCAT_HOST = 'localhost'
            DOCKER_REGISTRY = 'buntatiba'
            DOCKER_IMAGE = "abctechnologies:${BUILD_NUMBER}"
     }
    stages {
        stage('compile') {
	         steps {
                // step1_compiles the code using Maven
                echo 'compiling..'
		            git branch: 'main', url: 'https://github.com/buntatiba/edureka_ABC_tech'
		            sh script: '/opt/maven/bin/mvn compile'
           }
        }
        stage('codereview-pmd') {
	         steps {
                // step2_Performs code review and static analysis using PMD. Issues are recorded and analyzed
                echo 'codereview..'
		            sh script: '/opt/maven/bin/mvn -P metrics pmd:pmd'
           }
	         post {
               success {
		             recordIssues enabledForFailure: true, tool: pmdParser(pattern: '**/target/pmd.xml')
               }
           }		
        }
        stage('unit-test') {
	          steps {
                // step3_Runs unit tests and reports results using JUnit.
                echo 'unittest..'
	               sh script: '/opt/maven/bin/mvn test'
            }
	          post {
               success {
                   junit 'target/surefire-reports/*.xml'
               }
            }			
        }
        stage('codecoverage') {
	   steps {
          // step4_Measures code coverage using Jacoco and ensures coverage thresholds are met.
                echo 'unittest..'
	        sh script: '/opt/maven/bin/mvn verify'
                 }
	   post {
               success {
                   jacoco buildOverBuild: true, deltaBranchCoverage: '20', deltaClassCoverage: '20', deltaComplexityCoverage: '20', deltaInstructionCoverage: '20', deltaLineCoverage: '20', deltaMethodCoverage: '20'
               }
           }			
        }
        stage('package/build-war') {
	         steps {
                // step5_Packages the application into a WAR file.
                echo 'package......'
		            sh script: '/opt/maven/bin/mvn package'	
           }		
        }
        
       stage('build & push docker image') {
	         steps {
                // step6 Builds the Docker image using a Dockerfile and pushes it to a Docker registry.
              withDockerRegistry(credentialsId: 'DOCKER_HUB_LOGIN', url: 'https://index.docker.io/v1/') {
                    sh script: 'cd  $WORKSPACE'
                    sh script: 'docker build --file Dockerfile --tag docker.io/buntatiba/abctechnologies:$BUILD_NUMBER .'
                    sh script: 'docker push docker.io/buntatiba/abctechnologies:$BUILD_NUMBER'
                }	
            }		
        }
        stage('deploy-QA') {
	         steps {
                // step7_Deploys the application to the QA environment using an Ansible playbook.
                    sh script: 'ansible-playbook $WORKSPACE/deploy/deploy-kube.yml --extra-vars "env=qa build=$BUILD_NUMBER"'
           }		
        }
       stage('Deploy to prod') {
  	    steps {
            // step8_Deploys the application to the production environment using another Ansible playbook.
    		sh script: 'ansible-playbook $WORKSPACE/deploy/deploy-kube-prod.yml --extra-vars "env=qa build=$BUILD_NUMBER"'
	      }
	    }   
    }     
} 